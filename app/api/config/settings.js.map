{"version":3,"file":"settings.js","sourceRoot":"","sources":["../../../src-api/api/config/settings.ts"],"names":[],"mappings":";;AAGA,iDAAuD;AACvD,mDAA+C;AAE/C,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AASzB,IAAI,YAAoB,CAAA;AACxB,IAAI,OAAO,GAAG,iBAAO,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;AACxD,EAAE,CAAC,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;IAC1B,YAAY,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC;IACnE,OAAO,GAAG,UAAU,CAAC,SAAS,CAAC,CAAA;AACjC,CAAC;AAAC,IAAI,CAAC,CAAC;IACN,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IAC/B,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;AACtC,CAAC;AAGD,oBAAoB,YAAoB;IACtC,IAAI,mBAAmB,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAA;IAC5E,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC;AACzD,CAAC;AAID,OAAO,CAAC,GAAG,CAAC,iBAAiB,OAAO,EAAE,CAAC,CAAA;AACvC,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAA;AAE3C,MAAM,SAAS,GAAG,CAAC,IAAiB;IAKlC,IAAI,WAAW,GAAW,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,aAAa,CAAA;IACnE,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,WAAW,EAAE,CAAA;AACzD,CAAC,CAAA;AAED,MAAM,YAAY,GAAG;IACnB,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,CAAA;AAChC,CAAC,CAAA;AAED,MAAM,OAAO,GAAG;IACd,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,MAAM,CAAC,CAAC,CAAA;AAC3D,CAAC,CAAA;AAED,MAAM,cAAc,GAAG;IACrB,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,0BAA0B,CAAC,CAAA;AAC3E,CAAC,CAAA;AAED,MAAM,WAAW,GAAG;IAClB,YAAY,EAAE,YAAY,EAAE;IAC5B,IAAI,EAAE,OAAO,EAAE;IACf,SAAS,EAAE,OAAO;IAClB,WAAW,EAAE,cAAc,EAAE;IAC7B,MAAM,EAAE,eAAiB;CAC1B,CAAA;AAEQ,kCAAW","sourcesContent":["// Copyright (c) Wael Rabadi. All rights reserved.\r\n// See LICENSE for details.\r\n\r\nimport { ITracer, tracer } from \"../../modules/tracer\";\r\nimport { cmdline } from \"../../modules/cmdline\"\r\n\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\n\r\ntype RuntimeMode = \"Production\" | \"Development\"\r\n\r\n// Set the path to root path of the app\r\n// expected structure\r\n// root\r\n//    - domain\r\n//    - context\r\nlet appDirectory: string\r\nlet envPath = cmdline.getArgValue(process.argv, \"--env\")\r\nif (envPath === undefined) {\r\n  appDirectory = fs.realpathSync(path.resolve(__filename, \"../../\"));\r\n  envPath = resolveApp(\"../.env\")\r\n} else {\r\n  envPath = path.resolve(envPath)\r\n  appDirectory = path.dirname(envPath)\r\n}\r\n\r\n\r\nfunction resolveApp(relativePath: string) {\r\n  let relativePathCleaned = path.join(...(relativePath.match(/([^\\\\\\/])*/gi)))\r\n  return path.resolve(appDirectory, relativePathCleaned);\r\n}\r\n\r\n// note: follow app/api/config path\r\n//let envPath = path.resolve(cmdline.getArgValue(process.argv, \"--env\")) || resolveApp(\"../.env\")\r\nconsole.log(`env path used ${envPath}`)\r\nrequire('dotenv').config({ path: envPath })\r\n\r\nconst isRuntime = (mode: RuntimeMode) => {\r\n  // code to test between dev or prod, update accordingly\r\n  // let { argv } = (process || { argv: <string[]>[] })\r\n  // const cmdDevPredicate = v => /^--dev$/.test(v)\r\n  // return ((mode === \"Development\") && argv.some(cmdDevPredicate))\r\n  let runtimeMode: string = process.env.RUNTIME_MODE || \"Development\"\r\n  return runtimeMode.toLowerCase() === mode.toLowerCase()\r\n}\r\n\r\nconst isProduction = () => {\r\n  return isRuntime(\"Production\")\r\n}\r\n\r\nconst getPort = () => {\r\n  return parseInt((process.env.ONEMARK_API_PORT || \"8081\"))\r\n}\r\n\r\nconst getOnemarkPath = () => {\r\n  return resolveApp(process.env.ONEMARK_PATH || \"./context/file/urls.json\")\r\n}\r\n\r\nconst appSettings = {\r\n  isProduction: isProduction(),\r\n  port: getPort(),\r\n  bodyLimit: \"100kb\",\r\n  marksDbPath: getOnemarkPath(),\r\n  tracer: tracer as ITracer\r\n}\r\n\r\nexport { appSettings }"]}