{"version":3,"file":"onemark-api.js","sourceRoot":"E:/Users/Wael/Work/psx/onemark/src-api/src-api/","sources":["onemark-api.ts"],"names":[],"mappings":";;AAWA,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAA;AAClC,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;AAgBzC;IAWE,YAAY,OAAwB;QAClC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,OAAO,CAAA;QACzC,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,EAAE,IAAI,EAAE,CAAC,GAAG,OAAO,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA,CAAC,CAAC,EAAE,CAAA;QAC/D,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,IAAI,CAAA;QACxB,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,GAAG,CAAA;IACnC,CAAC;IAED,IAAI;QACF,IAAI,CAAC,GAAG,GAAG,OAAO,EAAE,CAAA;QAIpB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAA;QACvD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAA;QAIxD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI;YAC1B,GAAG,CAAC,MAAM,CAAC,6BAA6B,EAAE,GAAG,CAAC,CAAA;YAC9C,GAAG,CAAC,MAAM,CAAC,8BAA8B,EAAE,gDAAgD,CAAC,CAAA;YAC5F,IAAI,EAAE,CAAA;QACR,CAAC,CAAC,CAAA;QAEF,MAAM,CAAC,IAAI,CAAA;IACb,CAAC;IAMD,QAAQ,CAAC,OAAyB;QAGhC,IAAI,CAAC;YACH,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBACtB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,CAAA;YACpC,CAAC,CAAC,CAAA;QACJ,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,EAAE,CAAC,CAAA;QACxD,CAAC;QAED,MAAM,CAAC,IAAI,CAAA;IACb,CAAC;IAKD,GAAG;QAGD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG;YAC3C,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;YACvB,CAAC;QACH,CAAC,CAAC,CAAA;QACF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,yBAAyB,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,CAAC,CAAA;IAC1G,CAAC;CACF;AAEQ,gCAAU","sourcesContent":["// Copyright (c) Wael Rabadi. All rights reserved.\r\n// See LICENSE for details.\r\n\r\n// BASE SETUP\r\n// ==============================================\r\n\r\nimport { Express } from \"@types/express\"\r\nimport { Server } from \"http\"\r\nimport { OptionsJson } from \"body-parser\"\r\nimport { ITracer } from \"./tracer\"\r\n\r\nconst express = require(\"express\")\r\nconst bodyParser = require(\"body-parser\")\r\n\r\ninterface IExpressOptions {\r\n  tracer: ITracer\r\n  port: Number\r\n  bodyLimit: String\r\n}\r\ninterface IRouteOptions {\r\n  template: string\r\n  router: any\r\n}\r\n\r\ninterface IRegisterOptions {\r\n  routes: IRouteOptions[]\r\n}\r\n\r\nclass OnemarkApi {\r\n  bodyLimit: number | String\r\n  port: Number\r\n  server: Server\r\n  tracer: ITracer\r\n  app: Express\r\n\r\n  /**\r\n   * create a new OnemarkApi object\r\n   * @param options {trace: Function,port: Number,bodyLimit: String}\r\n   */\r\n  constructor(options: IExpressOptions) {\r\n    let { tracer, port, bodyLimit } = options\r\n    this.tracer = tracer || { info: (msg) => { console.log(msg) } }\r\n    this.port = port || 3010\r\n    this.bodyLimit = bodyLimit || 300\r\n  }\r\n\r\n  init() {\r\n    this.app = express()\r\n\r\n    // configure app to use bodyParser()\r\n    // this will let us get the data from a POST\r\n    this.app.use(bodyParser.urlencoded({ extended: true }))\r\n    this.app.use(bodyParser.json({ limit: this.bodyLimit }))\r\n\r\n    // CORS\r\n    // ==============================================\r\n    this.app.use((req, res, next) => {\r\n      res.header(\"Access-Control-Allow-Origin\", \"*\")\r\n      res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\")\r\n      next()\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * register passed routes\r\n   * @param options {routes:[{template: string, router: RouterHandler}]}\r\n   */\r\n  register(options: IRegisterOptions) {\r\n    // ROUTES\r\n    // ==============================================\r\n    try {\r\n      options.routes.forEach(v => {\r\n        this.app.use(v.template, v.router)\r\n      })\r\n    } catch (e) {\r\n      this.tracer.info(`Building router table failed. ${e}`)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Run the app and start listening on requests\r\n   */\r\n  run() {\r\n    // START THE SERVER\r\n    // ==============================================\r\n    this.server = this.app.listen(this.port, (err) => {\r\n      if (err) {\r\n        this.tracer.info(err)\r\n      }\r\n    })\r\n    this.tracer.info(`App running at http://${this.server.address().address}:${this.server.address().port}`)\r\n  }\r\n}\r\n\r\nexport { OnemarkApi }"]}