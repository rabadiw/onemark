{"version":3,"file":"marks.repo.js","sourceRoot":"","sources":["../../../../src-api/api/context/file/marks.repo.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Wael Rabadi. All rights reserved.\r\n// See LICENSE for details.\r\n\r\nimport * as path from \"path\";\r\n\r\nimport { createHash } from \"crypto\";\r\nimport { appSettings } from \"../../config/settings\";\r\nimport { IMarksRepository } from \"../../marks/marks.domain\";\r\nimport { IMarksModel, IMarkModel } from \"../../marks/marks.domain\";\r\nimport { ITracer } from \"../../../modules/tracer\"\r\nimport { Observable } from \"rxjs\";\r\nimport MarkFileDb from \"./markFileDb\";\r\n\r\nclass MarksListRepo implements IMarksRepository {\r\n  tracer: ITracer;\r\n  marksFileDb: MarkFileDb;\r\n  marksDbPath: string = appSettings.marksDbPath;\r\n  marksDbSource$: Observable<IMarksModel>;\r\n\r\n  constructor(tracer: ITracer) {\r\n    this.tracer = tracer\r\n    this.tracer.info(`Marks file path ${this.marksDbPath}`)\r\n    this.marksFileDb = new MarkFileDb(tracer, this.marksDbPath)\r\n    this.marksDbSource$ = this.marksFileDb.createRx()\r\n  }\r\n\r\n  getAll() {\r\n    const getAllAsync = (resolve, reject) => {\r\n      this.marksDbSource$.subscribe(\r\n        (x) => resolve(x),\r\n        (e) => reject(e)\r\n      );\r\n    };\r\n    return new Promise(getAllAsync);\r\n  }\r\n\r\n  get(id) {\r\n    const getAsync = (resolve, reject) => {\r\n      this.marksDbSource$.subscribe(\r\n        (x) => {\r\n          // return requested item as item in array of data\r\n          let obj = <IMarksModel>{\r\n            version: x.version,\r\n            updated: x.updated,\r\n            data: <[IMarkModel]>(x.data.filter((v) => v.id === id))\r\n          };\r\n          resolve(obj);\r\n        },\r\n        (e) => {\r\n          reject(e);\r\n        }\r\n      );\r\n    };\r\n    return new Promise(getAsync);\r\n  }\r\n\r\n  append(marks) {\r\n    const createId = (v: string) => {\r\n      let hash = createHash(\"sha256\");\r\n      hash.update(v);\r\n      // set id, created, and domain\r\n      return hash.digest(\"hex\");\r\n    }\r\n    const getDomain = (v: string) => {\r\n      let domain = v.match(/\\b([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}\\b/i);\r\n      if (domain) {\r\n        return domain[0];\r\n      }\r\n      return \"\"\r\n    }\r\n\r\n    const appendAsync = (resolve, reject) => {\r\n      this.marksDbSource$.subscribe(\r\n        (x) => {\r\n          let objMap = new Map();\r\n          // Map helps maintain unique entries\r\n          x.data.forEach((v) => objMap.set(v.id, v));\r\n\r\n          // Ensure parameter is Array, rest of the code will be happy\r\n          if (!Array.isArray(marks)) {\r\n            marks = [marks];\r\n          }\r\n\r\n          // append/update entries  \r\n          marks.forEach((v) => {\r\n            // set id, created, and domain\r\n            v.id = createId(v.url);\r\n            v.domain = getDomain(v.url);\r\n            // add to map\r\n            if (objMap.has(v.id)) {\r\n              let curObj = objMap.get(v.id);\r\n              v.created = curObj.created;\r\n              v.updated = (new Date()).toISOString();\r\n            } else {\r\n              v.created = (new Date()).toISOString();\r\n            }\r\n            objMap.set(v.id, v);\r\n          });\r\n\r\n          // Persist new object model to disk\r\n          let obj = <IMarksModel>{\r\n            version: x.version,\r\n            updated: (new Date()).toISOString(),\r\n            data: Array.from(objMap.values())\r\n          };\r\n          this.marksFileDb.saveMarksDb(obj)\r\n            .then(resolve)\r\n            .catch(err => reject(err));\r\n        },\r\n        (e) => {\r\n          reject(e);\r\n        }\r\n      );\r\n    };\r\n    return new Promise(appendAsync);\r\n  }\r\n\r\n  delete(marks) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      this.marksDbSource$.subscribe(\r\n        (x) => {\r\n          // get JSON file as object, create Map() of data\r\n          let objMap = new Map();\r\n          x.data.forEach((v) => objMap.set(v.id, v));\r\n\r\n          if (!Array.isArray(marks)) {\r\n            marks = [marks];\r\n          }\r\n\r\n          marks.forEach((v) => objMap.delete(v));\r\n\r\n          // Persist new object model to disk\r\n          let obj = <IMarksModel>{\r\n            version: x.version,\r\n            updated: (new Date()).toISOString(),\r\n            data: Array.from(objMap.values())\r\n          };\r\n          this.marksFileDb.saveMarksDb(obj)\r\n            .then(resolve)\r\n            .catch(err => reject(err));\r\n\r\n        },\r\n        (e) => {\r\n          reject(e);\r\n        }\r\n      );\r\n    });\r\n  }\r\n}\r\n\r\nexport { MarksListRepo }\r\n"]}