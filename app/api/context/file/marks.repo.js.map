{"version":3,"file":"marks.repo.js","sourceRoot":"E:/Users/Wael/Work/psx/onemark/src-api/src-api/","sources":["context/file/marks.repo.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from \"path\";\r\nimport * as Rx from \"rxjs\";\r\nimport { readFile, writeFile } from \"fs\";\r\nimport { createHash } from \"crypto\";\r\nimport { appSettings } from \"../../config/settings\";\r\nimport { IMarksRepository } from \"../../marks/marks.domain\";\r\nimport { IMarksModel, IMarkModel } from \"../../marks/marks.domain\";\r\n\r\nclass MarksListRepo implements IMarksRepository {\r\n  // path relative to entry point\r\n  marksDbPath: string = appSettings.marksDbPath;\r\n  defaultModel = {\r\n    version: \"1.0.0\",\r\n    updated: \"2016-08-10T21:18:04.432Z\",\r\n    data: []\r\n  };\r\n\r\n  marksDbSourceInternal = Rx.Observable.bindNodeCallback(readFile)(this.marksDbPath);\r\n\r\n  loadMarks = (callback) => {\r\n    let data: string = \"\";\r\n    this.marksDbSourceInternal.subscribe(\r\n      (buffer) => {\r\n        data += buffer.toString(\"utf8\");\r\n      },\r\n      (e) => {\r\n        if (e.code !== \"ENOENT\") {\r\n          throw e;\r\n        }\r\n        callback(JSON.stringify(this.defaultModel));\r\n      },\r\n      () => {\r\n        callback(data);\r\n      });\r\n  }\r\n\r\n  marksDbSource = Rx.Observable.bindCallback(this.loadMarks)();\r\n\r\n  saveMarksDb = (data) => {\r\n    return new Promise((resolve, reject) => {\r\n      // Maintain updated value\r\n      data.updated = (new Date()).toISOString();\r\n      // Save to file\r\n      writeFile(this.marksDbPath, JSON.stringify(data), (err) => {\r\n        if (err) { reject(err); return; }\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  constructor() {\r\n    console.log(`Marks file path ${this.marksDbPath}`);\r\n  }\r\n\r\n  getAll() {\r\n    const getAllAsync = (resolve, reject) => {\r\n      this.marksDbSource.subscribe(\r\n        (x) => resolve(x),\r\n        (e) => reject(e)\r\n      );\r\n    };\r\n    return new Promise(getAllAsync);\r\n  }\r\n\r\n  get(id) {\r\n    const getAsync = (resolve, reject) => {\r\n      this.marksDbSource.subscribe(\r\n        (x) => {\r\n          // get JSON file as object, create Map() of data\r\n          let obj = (typeof x !== \"string\") ? x : JSON.parse(String(x));\r\n          obj.data = obj.data.filter((v) => v.id === id);\r\n          resolve(obj);\r\n        },\r\n        (e) => {\r\n          reject(e);\r\n        }\r\n      );\r\n    };\r\n    return new Promise(getAsync);\r\n  }\r\n\r\n  append(marks) {\r\n    const appendAsync = (resolve, reject) => {\r\n      this.marksDbSource.subscribe(\r\n        (x) => {\r\n          // get JSON file as object, create Map() of data\r\n          let obj = (typeof x !== \"string\") ? x : JSON.parse(String(x));\r\n          let objMap = new Map();\r\n          // Map helps maintain unique entries\r\n          obj.data.forEach((v) => objMap.set(v.id, v));\r\n\r\n          // Ensure parameter is Array, rest of the code will be happy\r\n          if (!Array.isArray(marks)) {\r\n            marks = [marks];\r\n          }\r\n\r\n          marks.forEach((v) => {\r\n            let hash = createHash(\"sha256\");\r\n            hash.update(v.url);\r\n            // set id, created, and domain\r\n            v.id = hash.digest(\"hex\");\r\n            let domain = v.url.match(/\\b([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}\\b/i);\r\n            if (domain) {\r\n              v.domain = domain[0];\r\n            }\r\n            // add to map\r\n            if (objMap.has(v.id)) {\r\n              v.created = objMap.get(v.id).created;\r\n              v.updated = (new Date()).toISOString();\r\n            } else {\r\n              v.created = (new Date()).toISOString();\r\n            }\r\n            objMap.set(v.id, v);\r\n          });\r\n\r\n          obj.data = Array.from(objMap.values());\r\n          this.saveMarksDb(obj)\r\n            .then(resolve)\r\n            .catch(err => reject(err));\r\n\r\n        },\r\n        (e) => {\r\n          reject(e);\r\n        }\r\n      );\r\n    };\r\n    return new Promise(appendAsync);\r\n  }\r\n\r\n  delete(marks) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      this.marksDbSource.subscribe(\r\n        (x) => {\r\n          // get JSON file as object, create Map() of data\r\n          let obj = (typeof x !== \"string\") ? x : JSON.parse(String(x));\r\n          let objMap = new Map();\r\n          obj.data.forEach((v) => objMap.set(v.id, v));\r\n\r\n          if (!Array.isArray(marks)) {\r\n            marks = [marks];\r\n          }\r\n\r\n          marks.forEach((v) => objMap.delete(v));\r\n\r\n          obj.data = Array.from(objMap.values());\r\n          this.saveMarksDb(obj)\r\n            .then(resolve)\r\n            .catch(err => reject(err));\r\n\r\n        },\r\n        (e) => {\r\n          reject(e);\r\n        }\r\n      );\r\n    });\r\n  }\r\n}\r\n\r\nexport { MarksListRepo }\r\n\r\n// simply output the file\r\n// fs.createReadStream(marksDb, { flags: \"r\", encoding: \"utf-8\" })\r\n//   .on(\"error\", (err) => {\r\n//     res.status(400).send(err);\r\n//   }).pipe(res);"]}